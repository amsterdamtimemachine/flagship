<script lang="ts">
	import { run, createBubbler } from 'svelte/legacy';

	const bubble = createBubbler();
	import { mergeCss } from '$utils';

	interface Props {
		id?: string;
		name?: string;
		value?: string;
		type?:
			| 'text'
			| 'search'
			| 'email'
			| 'password'
			| 'tel'
			| 'url'
			| 'number'
			| 'date'
			| 'time'
			| 'datetime-local'
			| 'month'
			| 'week'
			| 'color';
		placeholder?: string;
		required?: boolean;
		disabled?: boolean;
		readonly?: boolean;
		autocomplete?: string;
		minlength?: number | null;
		maxlength?: number | null;
		pattern?: string | null;
		size?: number | null;
		errorMessage?: string;
		inputClass?: string;
		ariaDescribedby?: string;
		ariaInvalid?: boolean;
		class?: string | undefined;
		[key: string]: any;
	}

	let {
		id = '',
		name = '',
		value = $bindable(''),
		type = 'search',
		placeholder = '',
		required = false,
		disabled = false,
		readonly = false,
		autocomplete = 'on',
		minlength = null,
		maxlength = null,
		pattern = null,
		size = null,
		errorMessage = '',
		inputClass = '',
		ariaDescribedby = '',
		ariaInvalid = $bindable(false),
		class: className = undefined,
		...rest
	}: Props = $props();

	// Handle form validation state
	run(() => {
		invalid: boolean = errorMessage !== '';
	});
	run(() => {
		ariaInvalid = invalid || ariaInvalid;
	});
	run(() => {
		describedByIds: string = [ariaDescribedby, invalid ? `${id}-error` : null]
			.filter(Boolean)
			.join(' ');
	});

	// Tailwind classes for the input
	run(() => {
		baseInputClasses: string =
			'w-full px-3 py-2 border rounded-md text-base focus:outline-none focus:ring-2 transition-colors';
	});
	run(() => {
		stateInputClasses: string = invalid
			? 'border-red-500 focus:border-red-500 focus:ring-red-200'
			: 'border-gray-300 focus:border-blue-500 focus:ring-blue-200';
	});
	run(() => {
		disabledInputClasses: string = disabled ? 'bg-gray-100 text-gray-500 cursor-not-allowed' : '';
	});
	run(() => {
		finalInputClasses: string = `${baseInputClasses} ${stateInputClasses} ${disabledInputClasses} ${inputClass}`;
	});
</script>

<div class={`mb-4 ${className || ''}`}>
	<input
		{id}
		{name}
		{type}
		bind:value
		{placeholder}
		{disabled}
		{readonly}
		{required}
		{autocomplete}
		aria-invalid={ariaInvalid}
		aria-required={required}
		aria-describedby={describedByIds || undefined}
		class={finalInputClasses}
		{pattern}
		{size}
		min={type === 'number' ? minlength : undefined}
		max={type === 'number' ? maxlength : undefined}
		minlength={type !== 'number' ? minlength : undefined}
		maxlength={type !== 'number' ? maxlength : undefined}
		oninput={bubble('input')}
		onchange={bubble('change')}
		onfocus={bubble('focus')}
		onblur={bubble('blur')}
		onkeydown={bubble('keydown')}
		onkeyup={bubble('keyup')}
		onkeypress={bubble('keypress')}
		{...rest}
	/>

	{#if errorMessage}
		<div class="mt-1 text-sm text-red-600" id="{id}-error" aria-live="polite">
			{errorMessage}
		</div>
	{/if}
</div>
